/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SignTypes {
  export type SigReqParamsStruct = {
    walletTypeId: BytesLike;
    walletIndex: BigNumberish;
    dstChainId: BytesLike;
    payload: BytesLike;
    owner: AddressLike;
    zrSignReqType: BigNumberish;
    broadcast: boolean;
  };

  export type SigReqParamsStructOutput = [
    walletTypeId: string,
    walletIndex: bigint,
    dstChainId: string,
    payload: string,
    owner: string,
    zrSignReqType: bigint,
    broadcast: boolean
  ] & {
    walletTypeId: string;
    walletIndex: bigint;
    dstChainId: string;
    payload: string;
    owner: string;
    zrSignReqType: bigint;
    broadcast: boolean;
  };

  export type ReqRegistryStruct = { status: BigNumberish; value: BigNumberish };

  export type ReqRegistryStructOutput = [status: bigint, value: bigint] & {
    status: bigint;
    value: bigint;
  };

  export type WalletRegistryStruct = {
    status: BigNumberish;
    options: BigNumberish;
    value: BigNumberish;
  };

  export type WalletRegistryStructOutput = [
    status: bigint,
    options: bigint,
    value: bigint
  ] & { status: bigint; options: bigint; value: bigint };

  export type ZrKeyReqParamsStruct = {
    walletTypeId: BytesLike;
    options: BigNumberish;
  };

  export type ZrKeyReqParamsStructOutput = [
    walletTypeId: string,
    options: bigint
  ] & { walletTypeId: string; options: bigint };

  export type ZrKeyResParamsStruct = {
    walletTypeId: BytesLike;
    owner: AddressLike;
    walletIndex: BigNumberish;
    wallet: string;
    options: BigNumberish;
    authSignature: BytesLike;
  };

  export type ZrKeyResParamsStructOutput = [
    walletTypeId: string,
    owner: string,
    walletIndex: bigint,
    wallet: string,
    options: bigint,
    authSignature: string
  ] & {
    walletTypeId: string;
    owner: string;
    walletIndex: bigint;
    wallet: string;
    options: bigint;
    authSignature: string;
  };

  export type ZrSignParamsStruct = {
    walletTypeId: BytesLike;
    walletIndex: BigNumberish;
    dstChainId: BytesLike;
    payload: BytesLike;
    broadcast: boolean;
  };

  export type ZrSignParamsStructOutput = [
    walletTypeId: string,
    walletIndex: bigint,
    dstChainId: string,
    payload: string,
    broadcast: boolean
  ] & {
    walletTypeId: string;
    walletIndex: bigint;
    dstChainId: string;
    payload: string;
    broadcast: boolean;
  };

  export type SignResParamsStruct = {
    traceId: BigNumberish;
    owner: AddressLike;
    metaData: BytesLike;
    signature: BytesLike;
    broadcast: boolean;
    authSignature: BytesLike;
  };

  export type SignResParamsStructOutput = [
    traceId: bigint,
    owner: string,
    metaData: string,
    signature: string,
    broadcast: boolean,
    authSignature: string
  ] & {
    traceId: bigint;
    owner: string;
    metaData: string;
    signature: string;
    broadcast: boolean;
    authSignature: string;
  };
}

export declare namespace ZrSignTypes {
  export type ChainInfoStruct = {
    purpose: BigNumberish;
    coinType: BigNumberish;
  };

  export type ChainInfoStructOutput = [purpose: bigint, coinType: bigint] & {
    purpose: bigint;
    coinType: bigint;
  };
}

export interface ZrSignInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_ROLE"
      | "IS_DATA_MASK"
      | "IS_HASH_MASK"
      | "IS_SIMPLE_TX_MASK"
      | "IS_TX_MASK"
      | "MPC_ROLE"
      | "PAUSER_ROLE"
      | "SRC_CHAIN_ID"
      | "SRC_WALLET_TYPE_ID"
      | "chainIdConfig"
      | "estimateFee(uint8,uint256)"
      | "estimateFee(bytes32,address,uint256,uint256)"
      | "getMPCFee"
      | "getRequestState"
      | "getRespGas"
      | "getRespGasPriceBuffer"
      | "getRoleAdmin"
      | "getTraceId"
      | "getWalletRegistry"
      | "getWalletTypeInfo"
      | "getZrKey"
      | "getZrKeys"
      | "grantRole"
      | "hasRole"
      | "initializeV1"
      | "isChainIdSupported"
      | "isWalletTypeSupported"
      | "pause"
      | "paused"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "unpause"
      | "updateMPCFee"
      | "updateRespGas"
      | "updateRespGasBuffer"
      | "version"
      | "walletTypeIdConfig"
      | "withdrawMPCFees"
      | "zrKeyReq"
      | "zrKeyRes"
      | "zrSignData"
      | "zrSignHash"
      | "zrSignRes"
      | "zrSignSimpleTx"
      | "zrSignTx"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChainIdSupport"
      | "Initialized"
      | "MPCFeeUpdate"
      | "MPCFeeWithdraw"
      | "Paused"
      | "RespGasPriceBufferUpdate"
      | "RespGasUpdate"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
      | "WalletTypeIdSupport"
      | "ZrKeyRequest"
      | "ZrKeyResolve"
      | "ZrSigRequest"
      | "ZrSigResolve"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "FEE_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "IS_DATA_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IS_HASH_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IS_SIMPLE_TX_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "IS_TX_MASK",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MPC_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SRC_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SRC_WALLET_TYPE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "chainIdConfig",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFee(uint8,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateFee(bytes32,address,uint256,uint256)",
    values: [BytesLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getMPCFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRequestState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRespGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRespGasPriceBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTraceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletRegistry",
    values: [BytesLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletTypeInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getZrKey",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getZrKeys",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isChainIdSupported",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWalletTypeSupported",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMPCFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRespGas",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRespGasBuffer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "walletTypeIdConfig",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMPCFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "zrKeyReq",
    values: [SignTypes.ZrKeyReqParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "zrKeyRes",
    values: [SignTypes.ZrKeyResParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "zrSignData",
    values: [SignTypes.ZrSignParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "zrSignHash",
    values: [SignTypes.ZrSignParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "zrSignRes",
    values: [SignTypes.SignResParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "zrSignSimpleTx",
    values: [SignTypes.ZrSignParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "zrSignTx",
    values: [SignTypes.ZrSignParamsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "FEE_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "IS_DATA_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IS_HASH_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "IS_SIMPLE_TX_MASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "IS_TX_MASK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MPC_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SRC_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SRC_WALLET_TYPE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainIdConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFee(uint8,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateFee(bytes32,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMPCFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequestState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRespGas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRespGasPriceBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTraceId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWalletRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletTypeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getZrKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getZrKeys", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChainIdSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWalletTypeSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMPCFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRespGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRespGasBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "walletTypeIdConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMPCFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zrKeyReq", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zrKeyRes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zrSignData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zrSignHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zrSignRes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zrSignSimpleTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zrSignTx", data: BytesLike): Result;
}

export namespace ChainIdSupportEvent {
  export type InputTuple = [
    walletTypeId: BytesLike,
    chainId: BytesLike,
    caip: string,
    support: boolean
  ];
  export type OutputTuple = [
    walletTypeId: string,
    chainId: string,
    caip: string,
    support: boolean
  ];
  export interface OutputObject {
    walletTypeId: string;
    chainId: string;
    caip: string;
    support: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MPCFeeUpdateEvent {
  export type InputTuple = [oldBaseFee: BigNumberish, newBaseFee: BigNumberish];
  export type OutputTuple = [oldBaseFee: bigint, newBaseFee: bigint];
  export interface OutputObject {
    oldBaseFee: bigint;
    newBaseFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MPCFeeWithdrawEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RespGasPriceBufferUpdateEvent {
  export type InputTuple = [
    oldGasPriceBuff: BigNumberish,
    newGasPriceBuff: BigNumberish
  ];
  export type OutputTuple = [oldGasPriceBuff: bigint, newGasPriceBuff: bigint];
  export interface OutputObject {
    oldGasPriceBuff: bigint;
    newGasPriceBuff: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RespGasUpdateEvent {
  export type InputTuple = [oldGas: BigNumberish, newGas: BigNumberish];
  export type OutputTuple = [oldGas: bigint, newGas: bigint];
  export interface OutputObject {
    oldGas: bigint;
    newGas: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletTypeIdSupportEvent {
  export type InputTuple = [
    purpose: BigNumberish,
    coinType: BigNumberish,
    walletTypeId: BytesLike,
    support: boolean
  ];
  export type OutputTuple = [
    purpose: bigint,
    coinType: bigint,
    walletTypeId: string,
    support: boolean
  ];
  export interface OutputObject {
    purpose: bigint;
    coinType: bigint;
    walletTypeId: string;
    support: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZrKeyRequestEvent {
  export type InputTuple = [
    walletTypeId: BytesLike,
    owner: AddressLike,
    walletIndex: BigNumberish,
    options: BigNumberish
  ];
  export type OutputTuple = [
    walletTypeId: string,
    owner: string,
    walletIndex: bigint,
    options: bigint
  ];
  export interface OutputObject {
    walletTypeId: string;
    owner: string;
    walletIndex: bigint;
    options: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZrKeyResolveEvent {
  export type InputTuple = [
    walletTypeId: BytesLike,
    owner: AddressLike,
    walletIndex: BigNumberish,
    addr: string
  ];
  export type OutputTuple = [
    walletTypeId: string,
    owner: string,
    walletIndex: bigint,
    addr: string
  ];
  export interface OutputObject {
    walletTypeId: string;
    owner: string;
    walletIndex: bigint;
    addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZrSigRequestEvent {
  export type InputTuple = [
    traceId: BigNumberish,
    walletId: BytesLike,
    params: SignTypes.SigReqParamsStruct
  ];
  export type OutputTuple = [
    traceId: bigint,
    walletId: string,
    params: SignTypes.SigReqParamsStructOutput
  ];
  export interface OutputObject {
    traceId: bigint;
    walletId: string;
    params: SignTypes.SigReqParamsStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ZrSigResolveEvent {
  export type InputTuple = [
    traceId: BigNumberish,
    metaData: BytesLike,
    signature: BytesLike,
    broadcast: boolean
  ];
  export type OutputTuple = [
    traceId: bigint,
    metaData: string,
    signature: string,
    broadcast: boolean
  ];
  export interface OutputObject {
    traceId: bigint;
    metaData: string;
    signature: string;
    broadcast: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZrSign extends BaseContract {
  connect(runner?: ContractRunner | null): ZrSign;
  waitForDeployment(): Promise<this>;

  interface: ZrSignInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_ROLE: TypedContractMethod<[], [string], "view">;

  IS_DATA_MASK: TypedContractMethod<[], [bigint], "view">;

  IS_HASH_MASK: TypedContractMethod<[], [bigint], "view">;

  IS_SIMPLE_TX_MASK: TypedContractMethod<[], [bigint], "view">;

  IS_TX_MASK: TypedContractMethod<[], [bigint], "view">;

  MPC_ROLE: TypedContractMethod<[], [string], "view">;

  PAUSER_ROLE: TypedContractMethod<[], [string], "view">;

  SRC_CHAIN_ID: TypedContractMethod<[], [string], "view">;

  SRC_WALLET_TYPE_ID: TypedContractMethod<[], [string], "view">;

  chainIdConfig: TypedContractMethod<
    [walletTypeId: BytesLike, caip: string, support: boolean],
    [void],
    "nonpayable"
  >;

  "estimateFee(uint8,uint256)": TypedContractMethod<
    [options: BigNumberish, value: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;

  "estimateFee(bytes32,address,uint256,uint256)": TypedContractMethod<
    [
      walletTypeId: BytesLike,
      owner: AddressLike,
      walletIndex: BigNumberish,
      value: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;

  getMPCFee: TypedContractMethod<[], [bigint], "view">;

  getRequestState: TypedContractMethod<
    [traceId: BigNumberish],
    [SignTypes.ReqRegistryStructOutput],
    "view"
  >;

  getRespGas: TypedContractMethod<[], [bigint], "view">;

  getRespGasPriceBuffer: TypedContractMethod<[], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTraceId: TypedContractMethod<[], [bigint], "view">;

  getWalletRegistry: TypedContractMethod<
    [walletTypeId: BytesLike, walletIndex: BigNumberish, owner: AddressLike],
    [SignTypes.WalletRegistryStructOutput],
    "view"
  >;

  getWalletTypeInfo: TypedContractMethod<
    [walletTypeId: BytesLike],
    [ZrSignTypes.ChainInfoStructOutput],
    "view"
  >;

  getZrKey: TypedContractMethod<
    [walletTypeId: BytesLike, owner: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;

  getZrKeys: TypedContractMethod<
    [walletTypeId: BytesLike, owner: AddressLike],
    [string[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initializeV1: TypedContractMethod<[], [void], "nonpayable">;

  isChainIdSupported: TypedContractMethod<
    [walletTypeId: BytesLike, chainId: BytesLike],
    [boolean],
    "view"
  >;

  isWalletTypeSupported: TypedContractMethod<
    [walletTypeId: BytesLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateMPCFee: TypedContractMethod<
    [newMPCFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRespGas: TypedContractMethod<
    [newRespGas: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRespGasBuffer: TypedContractMethod<
    [newRespGasBuffer: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [bigint], "view">;

  walletTypeIdConfig: TypedContractMethod<
    [purpose: BigNumberish, coinType: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;

  withdrawMPCFees: TypedContractMethod<[], [void], "nonpayable">;

  zrKeyReq: TypedContractMethod<
    [params: SignTypes.ZrKeyReqParamsStruct],
    [void],
    "payable"
  >;

  zrKeyRes: TypedContractMethod<
    [params: SignTypes.ZrKeyResParamsStruct],
    [void],
    "nonpayable"
  >;

  zrSignData: TypedContractMethod<
    [params: SignTypes.ZrSignParamsStruct],
    [void],
    "payable"
  >;

  zrSignHash: TypedContractMethod<
    [params: SignTypes.ZrSignParamsStruct],
    [void],
    "payable"
  >;

  zrSignRes: TypedContractMethod<
    [params: SignTypes.SignResParamsStruct],
    [void],
    "nonpayable"
  >;

  zrSignSimpleTx: TypedContractMethod<
    [params: SignTypes.ZrSignParamsStruct],
    [void],
    "payable"
  >;

  zrSignTx: TypedContractMethod<
    [params: SignTypes.ZrSignParamsStruct],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "IS_DATA_MASK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IS_HASH_MASK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IS_SIMPLE_TX_MASK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "IS_TX_MASK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MPC_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PAUSER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SRC_CHAIN_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SRC_WALLET_TYPE_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "chainIdConfig"
  ): TypedContractMethod<
    [walletTypeId: BytesLike, caip: string, support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "estimateFee(uint8,uint256)"
  ): TypedContractMethod<
    [options: BigNumberish, value: BigNumberish],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "estimateFee(bytes32,address,uint256,uint256)"
  ): TypedContractMethod<
    [
      walletTypeId: BytesLike,
      owner: AddressLike,
      walletIndex: BigNumberish,
      value: BigNumberish
    ],
    [[bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMPCFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRequestState"
  ): TypedContractMethod<
    [traceId: BigNumberish],
    [SignTypes.ReqRegistryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRespGas"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRespGasPriceBuffer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTraceId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWalletRegistry"
  ): TypedContractMethod<
    [walletTypeId: BytesLike, walletIndex: BigNumberish, owner: AddressLike],
    [SignTypes.WalletRegistryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWalletTypeInfo"
  ): TypedContractMethod<
    [walletTypeId: BytesLike],
    [ZrSignTypes.ChainInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getZrKey"
  ): TypedContractMethod<
    [walletTypeId: BytesLike, owner: AddressLike, index: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getZrKeys"
  ): TypedContractMethod<
    [walletTypeId: BytesLike, owner: AddressLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializeV1"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isChainIdSupported"
  ): TypedContractMethod<
    [walletTypeId: BytesLike, chainId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWalletTypeSupported"
  ): TypedContractMethod<[walletTypeId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMPCFee"
  ): TypedContractMethod<[newMPCFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRespGas"
  ): TypedContractMethod<[newRespGas: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRespGasBuffer"
  ): TypedContractMethod<
    [newRespGasBuffer: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "walletTypeIdConfig"
  ): TypedContractMethod<
    [purpose: BigNumberish, coinType: BigNumberish, support: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawMPCFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "zrKeyReq"
  ): TypedContractMethod<
    [params: SignTypes.ZrKeyReqParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "zrKeyRes"
  ): TypedContractMethod<
    [params: SignTypes.ZrKeyResParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "zrSignData"
  ): TypedContractMethod<
    [params: SignTypes.ZrSignParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "zrSignHash"
  ): TypedContractMethod<
    [params: SignTypes.ZrSignParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "zrSignRes"
  ): TypedContractMethod<
    [params: SignTypes.SignResParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "zrSignSimpleTx"
  ): TypedContractMethod<
    [params: SignTypes.ZrSignParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "zrSignTx"
  ): TypedContractMethod<
    [params: SignTypes.ZrSignParamsStruct],
    [void],
    "payable"
  >;

  getEvent(
    key: "ChainIdSupport"
  ): TypedContractEvent<
    ChainIdSupportEvent.InputTuple,
    ChainIdSupportEvent.OutputTuple,
    ChainIdSupportEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "MPCFeeUpdate"
  ): TypedContractEvent<
    MPCFeeUpdateEvent.InputTuple,
    MPCFeeUpdateEvent.OutputTuple,
    MPCFeeUpdateEvent.OutputObject
  >;
  getEvent(
    key: "MPCFeeWithdraw"
  ): TypedContractEvent<
    MPCFeeWithdrawEvent.InputTuple,
    MPCFeeWithdrawEvent.OutputTuple,
    MPCFeeWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RespGasPriceBufferUpdate"
  ): TypedContractEvent<
    RespGasPriceBufferUpdateEvent.InputTuple,
    RespGasPriceBufferUpdateEvent.OutputTuple,
    RespGasPriceBufferUpdateEvent.OutputObject
  >;
  getEvent(
    key: "RespGasUpdate"
  ): TypedContractEvent<
    RespGasUpdateEvent.InputTuple,
    RespGasUpdateEvent.OutputTuple,
    RespGasUpdateEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WalletTypeIdSupport"
  ): TypedContractEvent<
    WalletTypeIdSupportEvent.InputTuple,
    WalletTypeIdSupportEvent.OutputTuple,
    WalletTypeIdSupportEvent.OutputObject
  >;
  getEvent(
    key: "ZrKeyRequest"
  ): TypedContractEvent<
    ZrKeyRequestEvent.InputTuple,
    ZrKeyRequestEvent.OutputTuple,
    ZrKeyRequestEvent.OutputObject
  >;
  getEvent(
    key: "ZrKeyResolve"
  ): TypedContractEvent<
    ZrKeyResolveEvent.InputTuple,
    ZrKeyResolveEvent.OutputTuple,
    ZrKeyResolveEvent.OutputObject
  >;
  getEvent(
    key: "ZrSigRequest"
  ): TypedContractEvent<
    ZrSigRequestEvent.InputTuple,
    ZrSigRequestEvent.OutputTuple,
    ZrSigRequestEvent.OutputObject
  >;
  getEvent(
    key: "ZrSigResolve"
  ): TypedContractEvent<
    ZrSigResolveEvent.InputTuple,
    ZrSigResolveEvent.OutputTuple,
    ZrSigResolveEvent.OutputObject
  >;

  filters: {
    "ChainIdSupport(bytes32,bytes32,string,bool)": TypedContractEvent<
      ChainIdSupportEvent.InputTuple,
      ChainIdSupportEvent.OutputTuple,
      ChainIdSupportEvent.OutputObject
    >;
    ChainIdSupport: TypedContractEvent<
      ChainIdSupportEvent.InputTuple,
      ChainIdSupportEvent.OutputTuple,
      ChainIdSupportEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "MPCFeeUpdate(uint256,uint256)": TypedContractEvent<
      MPCFeeUpdateEvent.InputTuple,
      MPCFeeUpdateEvent.OutputTuple,
      MPCFeeUpdateEvent.OutputObject
    >;
    MPCFeeUpdate: TypedContractEvent<
      MPCFeeUpdateEvent.InputTuple,
      MPCFeeUpdateEvent.OutputTuple,
      MPCFeeUpdateEvent.OutputObject
    >;

    "MPCFeeWithdraw(address,uint256)": TypedContractEvent<
      MPCFeeWithdrawEvent.InputTuple,
      MPCFeeWithdrawEvent.OutputTuple,
      MPCFeeWithdrawEvent.OutputObject
    >;
    MPCFeeWithdraw: TypedContractEvent<
      MPCFeeWithdrawEvent.InputTuple,
      MPCFeeWithdrawEvent.OutputTuple,
      MPCFeeWithdrawEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RespGasPriceBufferUpdate(uint256,uint256)": TypedContractEvent<
      RespGasPriceBufferUpdateEvent.InputTuple,
      RespGasPriceBufferUpdateEvent.OutputTuple,
      RespGasPriceBufferUpdateEvent.OutputObject
    >;
    RespGasPriceBufferUpdate: TypedContractEvent<
      RespGasPriceBufferUpdateEvent.InputTuple,
      RespGasPriceBufferUpdateEvent.OutputTuple,
      RespGasPriceBufferUpdateEvent.OutputObject
    >;

    "RespGasUpdate(uint256,uint256)": TypedContractEvent<
      RespGasUpdateEvent.InputTuple,
      RespGasUpdateEvent.OutputTuple,
      RespGasUpdateEvent.OutputObject
    >;
    RespGasUpdate: TypedContractEvent<
      RespGasUpdateEvent.InputTuple,
      RespGasUpdateEvent.OutputTuple,
      RespGasUpdateEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WalletTypeIdSupport(uint256,uint256,bytes32,bool)": TypedContractEvent<
      WalletTypeIdSupportEvent.InputTuple,
      WalletTypeIdSupportEvent.OutputTuple,
      WalletTypeIdSupportEvent.OutputObject
    >;
    WalletTypeIdSupport: TypedContractEvent<
      WalletTypeIdSupportEvent.InputTuple,
      WalletTypeIdSupportEvent.OutputTuple,
      WalletTypeIdSupportEvent.OutputObject
    >;

    "ZrKeyRequest(bytes32,address,uint256,uint8)": TypedContractEvent<
      ZrKeyRequestEvent.InputTuple,
      ZrKeyRequestEvent.OutputTuple,
      ZrKeyRequestEvent.OutputObject
    >;
    ZrKeyRequest: TypedContractEvent<
      ZrKeyRequestEvent.InputTuple,
      ZrKeyRequestEvent.OutputTuple,
      ZrKeyRequestEvent.OutputObject
    >;

    "ZrKeyResolve(bytes32,address,uint256,string)": TypedContractEvent<
      ZrKeyResolveEvent.InputTuple,
      ZrKeyResolveEvent.OutputTuple,
      ZrKeyResolveEvent.OutputObject
    >;
    ZrKeyResolve: TypedContractEvent<
      ZrKeyResolveEvent.InputTuple,
      ZrKeyResolveEvent.OutputTuple,
      ZrKeyResolveEvent.OutputObject
    >;

    "ZrSigRequest(uint256,bytes32,tuple)": TypedContractEvent<
      ZrSigRequestEvent.InputTuple,
      ZrSigRequestEvent.OutputTuple,
      ZrSigRequestEvent.OutputObject
    >;
    ZrSigRequest: TypedContractEvent<
      ZrSigRequestEvent.InputTuple,
      ZrSigRequestEvent.OutputTuple,
      ZrSigRequestEvent.OutputObject
    >;

    "ZrSigResolve(uint256,bytes,bytes,bool)": TypedContractEvent<
      ZrSigResolveEvent.InputTuple,
      ZrSigResolveEvent.OutputTuple,
      ZrSigResolveEvent.OutputObject
    >;
    ZrSigResolve: TypedContractEvent<
      ZrSigResolveEvent.InputTuple,
      ZrSigResolveEvent.OutputTuple,
      ZrSigResolveEvent.OutputObject
    >;
  };
}
